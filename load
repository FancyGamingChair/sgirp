local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/FancyGamingChair/sgirp/refs/heads/main/init'))()

local MainWindow = Rayfield:CreateWindow({
    Name = "Squid Game Infinity Roleplay", -- Title of the window
    Icon = "shield", -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Initialising...",
    LoadingSubtitle = "",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = true,
    DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "SGIRP Hub",
       Subtitle = "Key System",
       Note = "Key: Alpha", -- Use this to tell the user how to get a key
       FileName = "SGIRPKey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Alpha"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

-- Combat Tab:
local Combat = MainWindow:CreateTab("Combat", "swords") -- Title, Image

local AmmoSection = Combat:CreateSection("Ammo")

local InfAmmo = Combat:CreateButton({
   Name = "Infinite Ammo",
   Callback = function()
      --InfAmmo script
      local player = game:GetService("Players").LocalPlayer

      local function updateAmmo(container)
          for _, tool in pairs(container:GetChildren()) do
              if tool:IsA("Tool") then
                  local ammoValue = tool:FindFirstChild("CurrentAmmo")
                  if ammoValue and ammoValue:IsA("IntValue") then
                      ammoValue.Value = 99999999
                  end
              end
          end
      end
      
      updateAmmo(player.Backpack)
      if player.Character then
          updateAmmo(player.Character)
      end
   end,
})

-- Teleport Tab:
local Teleport = MainWindow:CreateTab("Teleport", "map-pin")

local TeleportSection = Teleport:CreateSection("Teleport")

local locations = {
    ["Player Sleeping Quarters"] = function()
        local spawnFolder = workspace:FindFirstChild("SpawnLocations")
        if spawnFolder then
            local playerSpawns = spawnFolder:FindFirstChild("PlayerSpawns")
            if playerSpawns then
                local spawnLocations = {}
                
                for _, set in pairs(playerSpawns:GetChildren()) do
                    if set:IsA("Model") and set.Name == "Set" then
                        for _, spawn in pairs(set:GetChildren()) do
                            if spawn:IsA("SpawnLocation") and spawn.Name == "SpawnLocation" then
                                table.insert(spawnLocations, spawn)
                            end
                        end
                    end
                end
                
                if #spawnLocations > 0 then
                    local randomSpawn = spawnLocations[math.random(1, #spawnLocations)]
                    return randomSpawn.CFrame + Vector3.new(0, 2.5, 0)
                end
            end
        end
        return nil
    end,
    ["Vents"] = CFrame.new(0, 0, 0),
    ["Control Center"] = CFrame.new(0, 0, 0),
    ["Front Man Office"] = CFrame.new(0, 0, 0),
    ["Secret Entrance"] = CFrame.new(0, 0, 0)
}

local selectedLocation = "None"

local Dropdown = Teleport:CreateDropdown({
   Name = "Location",
   Options = {"Player Sleeping Quarters","Vents","Control Center","Front Man Office","Secret Entrance"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "TeleportDropdown1",
   Callback = function(Options)
       selectedLocation = Options[1] or "None"
   end,
})

local TeleportBtn = Teleport:CreateButton({
   Name = "Teleport",
   Callback = function()
       local player = game:GetService("Players").LocalPlayer
       if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
           if selectedLocation ~= "None" then
               local destination = locations[selectedLocation]
               if type(destination) == "function" then
                   destination = destination()
               end
               if destination then
                   player.Character.HumanoidRootPart.CFrame = destination
               end
           end
       end
   end,
})










--Reload Tab:
local Reload = MainWindow:CreateTab("Reload", "refresh-ccw")

local ReloadSection = Reload:CreateSection("Reload")

local ReloadBtn = Reload:CreateButton({
   Name = "Reload",
   Callback = function()
      loadstring(game:HttpGet("https://raw.githubusercontent.com/FancyGamingChair/sgirp/refs/heads/main/load",true))()
   end,
})

Rayfield:LoadConfiguration()